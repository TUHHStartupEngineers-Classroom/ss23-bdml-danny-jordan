[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "1 Challenge Summary\nYour organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns.\n\n2 Objectives\nApply your knowledge on K-Means and UMAP along with dplyr, ggplot2, and purrr to create a visualization that identifies subgroups in the S&P 500 Index. You will specifically apply:\n\nModeling: kmeans() and umap()\n\nIteration: purrr\n\nData Manipulation: dplyr, tidyr, and tibble\n\nVisualization: ggplot2 (bonus plotly)\n\n3 Libraries\nLoad the following libraries.\n\n# install.packages(\"plotly\")\n\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\n\nlibrary(magrittr)\nlibrary(dplyr)\n\n\n4 Data\nWe will be using stock prices in this analysis. Although some of you know already how to use an API to retrieve stock prices I obtained the stock prices for every stock in the S&P 500 index for you already. The files are saved in the session_6_data directory.\nWe can read in the stock prices. The data is 1.2M observations. The most important columns for our analysis are:\n\n\nsymbol: The stock ticker symbol that corresponds to a company’s stock price\n\ndate: The timestamp relating the symbol to the share price at that point in time\n\nadjusted: The stock price, adjusted for any splits and dividends (we use this when analyzing stock data over long periods of time)\n\n\n# STOCK PRICES\nsp_500_prices_tbl <- read_rds(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/sp_500_prices_tbl.rds\")\nsp_500_prices_tbl\n\n\n\n  \n\n\n\nThe second data frame contains information about the stocks the most important of which are:\n\n\ncompany: The company name\n\nsector: The sector that the company belongs to\n\n\n# SECTOR INFORMATION\nsp_500_index_tbl <- read_rds(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/sp_500_index_tbl.rds\")\nsp_500_index_tbl"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Machine Learning Fundamentals",
    "section": "\n6.1 Header 2",
    "text": "6.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Supervised ML - Regression (I) & Supervised ML - Regression (II)",
    "section": "",
    "text": "#Load all neccessary libraries\n\n# Standard\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\n\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n#> \n#> Attaching package: 'yardstick'\n#> \n#> The following object is masked from 'package:readr':\n#> \n#>     spec\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n#> Loading required package: rpart\n\nlibrary(rsample)\nlibrary(parsnip)\nlibrary(yardstick)\nlibrary(workflows)\n\n\n1 Load the ‘bike_orderlines_tbl’ data from the specified file\n\nbike_orderlines_tbl <- readRDS(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/bike_orderlines.rds\")\nbike_orderlines_tbl\n\n\n\n  \n\n\n# Display the structure of the 'bike_orderlines_tbl' data\nglimpse(bike_orderlines_tbl)\n\n#> Rows: 15,644\n#> Columns: 18\n#> $ order_id       <dbl> 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7…\n#> $ order_line     <dbl> 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1…\n#> $ order_date     <dttm> 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0…\n#> $ model          <chr> \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"…\n#> $ model_year     <dbl> 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#> $ category_1     <chr> \"Mountain\", \"Road\", \"Mountain\", \"Road\", \"Mountain\", \"Hy…\n#> $ category_2     <chr> \"Trail\", \"Race\", \"Trail\", \"Triathlon Bike\", \"Dirt Jump\"…\n#> $ category_3     <chr> \"Spectral\", \"Ultimate\", \"Neuron\", \"Speedmax\", \"Stitched…\n#> $ price          <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#> $ quantity       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1…\n#> $ total_price    <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#> $ frame_material <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c…\n#> $ weight         <dbl> 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4…\n#> $ url            <chr> \"https://www.canyon.com/en-de/mountain-bikes/trail-bike…\n#> $ bikeshop       <chr> \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"…\n#> $ location       <chr> \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen…\n#> $ lat            <dbl> 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78…\n#> $ lng            <dbl> 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1…\n\n#Create new table\nmodel_sales_tbl <- bike_orderlines_tbl %>%\n\n    #Select: total price, model, category_2 and frame material\n    select(total_price, model, category_2, frame_material) %>%\n    \n    # Group the data by 'model', 'category_2', and 'frame_material'\n    group_by(model, category_2, frame_material) %>%\n    \n    # Calculate the total sales for each combination of 'model', 'category_2', and 'frame_material'\n    summarise(total_sales = sum(total_price)) %>%\n\n    # Ungroup the data\n    ungroup() %>%\n   \n    # Arrange the data in descending order of 'total_sales'\n    arrange(desc(total_sales))\n\n#> `summarise()` has grouped output by 'model', 'category_2'. You can override\n#> using the `.groups` argument.\n\n# Modify the 'category_2' column in 'model_sales_tbl' to reorder the levels based on 'total_sales'\nmodel_sales_tbl %>%\n    mutate(category_2 = as_factor(category_2) %>% \n               fct_reorder(total_sales, .fun = max) %>% \n               fct_rev()) %>%\n  \n    \n    # Create a violin plot with 'frame_material' on the x-axis and 'total_sales' on the y-axis\n    ggplot(aes(frame_material, total_sales)) +\n    geom_violin() +  # Add violin plot\n    geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +  # Add jittered points\n    facet_wrap(~ category_2) +  # Create separate facets for each 'category_2'\n    scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +  # Format y-axis labels as dollars in millions\n    tidyquant::theme_tq() +  # Apply a theme from the tidyquant package\n    labs(\n        title = \"Total Sales for Each Model\",  # Set the title of the plot\n        x = \"Frame Material\", y = \"Revenue\"  # Set the axis labels\n    )\n\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n#> Warning in max(data$density): no non-missing arguments to max; returning -Inf\n\n\n#> Warning: Computation failed in `stat_ydensity()`\n#> Caused by error in `$<-.data.frame`:\n#> ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\n\n#Data Preparation\n\nbike_features_tbl <- readRDS(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/bike_features_tbl.rds\")\nglimpse(bike_features_tbl)\n\n#> Rows: 231\n#> Columns: 67\n#> $ bike_id                     <dbl> 2875, 2873, 2874, 2876, 2877, 2225, 2091, …\n#> $ model                       <chr> \"Aeroad CF SL Disc 8.0 Di2\", \"Aeroad CF SL…\n#> $ model_year                  <dbl> 2020, 2020, 2020, 2020, 2020, 2019, 2019, …\n#> $ frame_material              <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"c…\n#> $ weight                      <dbl> 7.60, 7.27, 7.10, 7.73, 7.83, 6.80, 6.80, …\n#> $ price                       <dbl> 4579, 6919, 6429, 5069, 3609, 6139, 5359, …\n#> $ category_1                  <chr> \"Road\", \"Road\", \"Road\", \"Road\", \"Road\", \"R…\n#> $ category_2                  <chr> \"Race\", \"Race\", \"Race\", \"Race\", \"Race\", \"R…\n#> $ category_3                  <chr> \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroad\", \"A…\n#> $ gender                      <chr> \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"u…\n#> $ url                         <chr> \"https://www.canyon.com/en-de/road-bikes/r…\n#> $ Frame                       <chr> \"Canyon Aeroad CF SL Disc\", \"Canyon Aeroad…\n#> $ Fork                        <chr> \"Canyon FK0041 CF SLX Disc\", \"Canyon FK004…\n#> $ `Rear Derailleur`           <chr> \"Shimano Ultegra Di2 R8050 SS\", \"SRAM RED …\n#> $ `Front Derailleur`          <chr> \"Shimano Ultegra Di2 R8050\", \"SRAM RED eTa…\n#> $ Cassette                    <chr> \"Shimano Ultegra R8000, 11-speed, 11-28T\",…\n#> $ Crank                       <chr> \"Shimano Ultegra R8000\", \"SRAM RED D1\", \"S…\n#> $ `Bottom bracket`            <chr> \"Shimano Pressfit BB72\", \"SRAM Pressfit RE…\n#> $ `Thru Axle`                 <chr> \"Canyon Thru Axle\", \"Canyon Thru Axle\", \"C…\n#> $ Cockpit                     <chr> \"Canyon H36 Aerocockpit CF\", \"Canyon H36 A…\n#> $ Saddle                      <chr> \"Selle Italia SLR\", \"Selle Italia SLR\", \"S…\n#> $ Seatpost                    <chr> \"Canyon S27 Aero VCLS CF\", \"Canyon S27 Aer…\n#> $ Pedals                      <chr> \"None included\", \"None included\", \"None in…\n#> $ `Derailleur hanger`         <chr> \"Shop Derailleur Hanger GP0211-01\", \"Shop …\n#> $ Battery                     <chr> \"\", \"SRAM eTap Powerpack\", \"\", \"SRAM eTap …\n#> $ Brake                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Shift Lever`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano Di2 Remot…\n#> $ Chain                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano CN-HG901 …\n#> $ Stem                        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon V13\", …\n#> $ Handlebar                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon H16 Ae…\n#> $ Headset                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Motor                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Battery Charger`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Flat Pedals`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Chainguard                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Aero Bar`                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake Lever / Master`      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Wheel Tire System`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Suspension Fork`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Disc Brake`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Grips                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Chainring                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Display                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Modeswitch                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Rear Shock`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Light                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Fender                      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Bike Racks`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake 1`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou…\n#> $ `Brake 2`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou…\n#> $ `Shift-/ Brake Lever 1`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR…\n#> $ `Shift-/ Brake Lever 2`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR…\n#> $ `Wheel 1`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1…\n#> $ `Wheel 2`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1…\n#> $ `Tyre 1`                    <chr> \"Continental Grand Prix 5000 / Attack  23 …\n#> $ `Tyre 2`                    <chr> \"Continental Grand Prix 5000, 25 mm\", \"Con…\n#> $ `Handlebar Tape 1`          <chr> \"Canyon Ergospeed Gel\", \"Canyon Ergospeed …\n#> $ `Handlebar Tape 2`          <chr> \"Canyon bar-end plug\", \"Canyon bar-end plu…\n#> $ `Manuals and Accessories 1` <chr> \"Canyon tool case\", \"Canyon tool case\", \"C…\n#> $ `Manuals and Accessories 2` <chr> \"DT Swiss warranty & intended use manual\",…\n#> $ `Manuals and Accessories 3` <chr> \"Canyon starter box\", \"Canyon starter box\"…\n#> $ `Manuals and Accessories 4` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"BAG R…\n#> $ `Manuals and Accessories 5` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 6` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 7` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 8` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake Rotor`               <list> \"Shimano RT800\", \"SRAM Centerline X\", \"Sh…\n\nbike_features_tbl\n\n\n\n  \n\n\nbike_features_tbl <- bike_features_tbl %>% \n    select(model:url, `Rear Derailleur`, `Shift Lever`) %>% \n    mutate(\n      `shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n      `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n      `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n      `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n      `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n      `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n      `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n      `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n      `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n      `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n      `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n      `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n      `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n      `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n      `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n      `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n      `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n      `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n      `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n      `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n      `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n      `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n      `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n      `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n      `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n    ) %>% \n  # Remove original columns  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% \n  # Set all NAs to 0\n  mutate_if(is.numeric, ~replace(., is.na(.), 0))\n\n#bike_features_tbl\n\n\n2 Let’s order and tidy the tibble a bit. We need the following data:\n\n# 2.0 TRAINING & TEST SETS ----\n\nbike_features_tbl <- bike_features_tbl %>% \n  \n  mutate(id = row_number()) %>% \n  \n  select(id, everything())\nbike_features_tbl\n\n\n\n  \n\n\n\n\n3 split data in test and train set (randomly)\n\n# Filter E-Road because it caused problems (just 1 element, and it could no be in training and test -> error bc not known)\nbike_features_tbl <- bike_features_tbl %>%\n  filter(category_2 != \"E-Road\")\n\nbike_features_tbl %>% distinct(category_2)\n\n\n\n  \n\n\nsum(bike_features_tbl$category_2 == \"E-Road\")\n\n#> [1] 0\n\n# run both following commands at the same time\nset.seed(seed = 1113)\n\nsplit_obj <- initial_split(bike_features_tbl, prop = 0.80, strata = \"category_2\")\n\n# Check if testing contains all category_2 values\nsplit_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\n# Assign training and test data\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\n# We have to remove spaces and dashes from the column names\ntrain_tbl <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\n\n4 Linear Regression Model and prediction (bad result due to not well choosen features)\n\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>%\n    set_engine(\"lm\") %>%\n    fit(price ~ category_2 + frame_material, data = train_tbl)\ntest_tbl\n\n\n\n  \n\n\nmodel_01_linear_lm_simple %>%\n    predict(new_data = test_tbl)%>%\n\n    bind_cols(test_tbl %>% select(price)) %>%\n  \n    yardstick::metrics(truth = price, estimate = .pred)\n\n\n\n  \n\n\n\n\n5 New Bike to predict price (use simpel model with bad prediction (since I had some issues with the engineered features)\n\n# 5.1 NEW MODEL ----\n\nnew_cross_country <- tibble(\n        model = \"Exceed AL SL new\",\n        category_2 = \"Cross-Country\",\n        frame_material = \"aluminium\",\n        shimano_dura_ace = 0,\n        shimano_ultegra = 0,\n        shimano_105 = 0,\n        shimano_tiagra = 0,\n        Shimano_sora = 0,\n        shimano_deore = 0,\n        shimano_slx = 0,\n        shimano_grx = 0,\n        Shimano_xt = 1,\n        Shimano_xtr = 0,\n        Shimano_saint = 0,\n        SRAM_red = 0,\n        SRAM_force = 0,\n        SRAM_rival = 0,\n        SRAM_apex = 0,\n        SRAM_xx1 = 0,\n        SRAM_x01 = 0,\n        SRAM_gx = 0,\n        SRAM_nx = 0,\n        SRAM_sx = 0,\n        Campagnolo_potenza = 0,\n        Campagnolo_super_record = 0,\n        shimano_nexus = 0,\n        shimano_alfine = 0\n) \n\nnew_cross_country\n\n\n\n  \n\n\npredict(model_01_linear_lm_simple,, new_data = new_cross_country)\n\n\n\n  \n\n\n\n\n6 engineered feature for better prediction\n\n# 3.2.1 Model ----\nmodel_02_linear_lm_complex <- linear_reg(\"regression\") %>%\n    set_engine(\"lm\") %>%\n    \n    # This is going to be different. Remove unnecessary columns.\n    fit(price ~ ., data = train_tbl %>% select(-c(id:weight), -category_1, -c(category_3:gender)))\n\n#model_02_linear_lm_complex %>% calc_metrics(new_data = test_tbl)\n\n#1 CHALLENGE WITH RECIPES PACKAGE:\n\n# define the model\nlm_model_spec <- linear_reg() %>%\n  set_engine(\"lm\") %>%\n  set_mode(\"regression\")\n\n#2\n\nrecipe_obj <- recipe(price ~ ., data = train_tbl) %>%\n  step_rm(id, url, model) %>%\n  step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE) %>%\n  prep()\n\n# Apply preprocessing features to train and test data\ntrain_transformed_tbl <- bake(recipe_obj, new_data = train_tbl)\ntest_transformed_tbl  <- bake(recipe_obj, new_data = test_tbl)\n\n# Combine in workflow\nworkflow_obj <- workflow() %>%\n  add_recipe(recipe_obj) %>%\n  add_model(lm_model_spec) %>%\n  fit(data = train_tbl)\n\n# make predictions\npredictions <- predict(workflow_obj, new_data = test_tbl)\n\n#> Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#> \"response\"): prediction from a rank-deficient fit may be misleading\n\n\n\n# Combine predictions with actual prices\npredictions_with_actual <- bind_cols(test_transformed_tbl %>% select(price), predictions)\n\n# Calculate evaluation metrics\nevaluation_metrics <- yardstick::metrics(predictions_with_actual, truth = price, estimate = .pred)\n\n# Print evaluation metrics\nprint(evaluation_metrics)\n\n#> # A tibble: 3 × 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 rmse    standard    1073.   \n#> 2 rsq     standard       0.523\n#> 3 mae     standard     771."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Automated Machine Learning with H20 (I) & (II)",
    "section": "",
    "text": "#install.packages(\"h2o\")\nlibrary(h2o)\n\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n\n\n#> \n#> Attaching package: 'h2o'\n\n\n#> The following objects are masked from 'package:stats':\n#> \n#>     cor, sd, var\n\n\n#> The following objects are masked from 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n\n# To launch H2O locally with default initialization arguments, use the following: \nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         30 minutes 21 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 17 days \n#>     H2O cluster name:           H2O_started_from_R_jorda_ktd724 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.55 GB \n#>     H2O cluster total cores:    12 \n#>     H2O cluster allowed cores:  12 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.2.3 (2023-03-15 ucrt)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#load-the-training-test-dataset",
    "href": "content/01_journal/03_data_wrangling.html#load-the-training-test-dataset",
    "title": "Automated Machine Learning with H20 (I) & (II)",
    "section": "\n1.1 1. Load the training & test dataset",
    "text": "1.1 1. Load the training & test dataset\n\n# Required Libraries\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ lubridate::day()   masks h2o::day()\n#> ✖ dplyr::filter()    masks stats::filter()\n#> ✖ lubridate::hour()  masks h2o::hour()\n#> ✖ dplyr::lag()       masks stats::lag()\n#> ✖ lubridate::month() masks h2o::month()\n#> ✖ lubridate::week()  masks h2o::week()\n#> ✖ lubridate::year()  masks h2o::year()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(purrr)\nlibrary(dplyr)\nlibrary(recipes)\n\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\nlibrary(rsample)\nlibrary(h2o)\n\n\n# Initialize H2O\nh2o_connection <- h2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         30 minutes 25 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 17 days \n#>     H2O cluster name:           H2O_started_from_R_jorda_ktd724 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.55 GB \n#>     H2O cluster total cores:    12 \n#>     H2O cluster allowed cores:  12 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.2.3 (2023-03-15 ucrt)\n\n# Read and Split Data\nproduct_backorders_tbl <- read_csv(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/product_backorders.csv\")\n\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#test print\n#product_backorders_tbl\nset_seed <- 1113\nsplit_obj <- rsample::initial_split(product_backorders_tbl, prop = 0.85)\ntrain_data_tbl <- training(split_obj)\ntest_data_tbl <- testing(split_obj)\n\n# Data Preparation\nrecipe_obj <- recipe(went_on_backorder ~ ., data = train_data_tbl) %>%\n  step_zv(all_predictors()) %>%\n  prep()\n\ntrain_prepared_tbl <- bake(recipe_obj, new_data = train_data_tbl)\ntest_prepared_tbl <- bake(recipe_obj, new_data = test_data_tbl)\n#train_prepared_tbl\n#test_prepared_tbl"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#specifiy-the-response-and-predictor-variables",
    "href": "content/01_journal/03_data_wrangling.html#specifiy-the-response-and-predictor-variables",
    "title": "Automated Machine Learning with H20 (I) & (II)",
    "section": "\n1.2 2.Specifiy the response and predictor variables",
    "text": "1.2 2.Specifiy the response and predictor variables\n\n# Divide the data into a training and a validation data frame\n# The seed is set for the sake of reproducibility\nsplit_h2o <- h2o.splitFrame(as.h2o(train_prepared_tbl), ratios = c(0.85), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_prepared_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Define the response variable\ntarget_variable <- \"went_on_backorder\"\n\n# Define the predictor variables\nfeature_variables <- setdiff(names(train_h2o), target_variable)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#run-automl-specifying-the-stopping-criterion",
    "href": "content/01_journal/03_data_wrangling.html#run-automl-specifying-the-stopping-criterion",
    "title": "Automated Machine Learning with H20 (I) & (II)",
    "section": "\n1.3 3 run AutoML specifying the stopping criterion",
    "text": "1.3 3 run AutoML specifying the stopping criterion\n\n# Run automated machine learning\nautoml_model_h2o <- h2o.automl(\n  x = feature_variables,\n  y = target_variable,\n  training_frame = train_h2o,\n  validation_frame = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs = 30,\n  nfolds = 5\n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n#> 06:55:07.537: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 06:55:07.540: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |======================================================================| 100%\n\n#train_h2o\n#valid_h2o\n#test_h2o\n# Check the type of the automl_model_h2o object\nmodel_type <- typeof(automl_model_h2o)\n\n#model_type"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#view-the-leaderboard-5.save-the-leader-model-6.load-the-model",
    "href": "content/01_journal/03_data_wrangling.html#view-the-leaderboard-5.save-the-leader-model-6.load-the-model",
    "title": "Automated Machine Learning with H20 (I) & (II)",
    "section": "\n1.4 4. View the leaderboard 5.Save the leader model 6.Load the model",
    "text": "1.4 4. View the leaderboard 5.Save the leader model 6.Load the model\n\n# Get the names of slots in the automl_models_h2o object\nslots <- slotNames(automl_model_h2o)\n\n# Access the leaderboard from the automl_models_h2o object\nleaderboard <- automl_model_h2o@leaderboard\nleaderboard\n\n#>                                                 model_id       auc   logloss\n#> 1 StackedEnsemble_BestOfFamily_3_AutoML_4_20230615_65507 0.9548752 0.1624372\n#> 2 StackedEnsemble_BestOfFamily_2_AutoML_4_20230615_65507 0.9543220 0.1629562\n#> 3    StackedEnsemble_AllModels_2_AutoML_4_20230615_65507 0.9524745 0.1639352\n#> 4    StackedEnsemble_AllModels_1_AutoML_4_20230615_65507 0.9520404 0.1643658\n#> 5                          GBM_4_AutoML_4_20230615_65507 0.9506423 0.1666743\n#> 6                          GBM_3_AutoML_4_20230615_65507 0.9484670 0.1698379\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7226072            0.1578775 0.2212378 0.04894618\n#> 2 0.7211075            0.1564502 0.2213882 0.04901273\n#> 3 0.7164268            0.1468513 0.2223098 0.04942165\n#> 4 0.7161839            0.1392679 0.2223394 0.04943483\n#> 5 0.7110763            0.1471887 0.2229243 0.04969525\n#> 6 0.7093239            0.1541291 0.2249658 0.05060962\n#> \n#> [14 rows x 7 columns]\n\n\n\n# Extract the name of a specific model from the leaderboard\nget_model_name <- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name <- h2o_leaderboard %>%\n    as_tibble() %>%\n    slice(n) %>%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\n# Get the name of the 6th model in the leaderboard\nmodel_name <- automl_model_h2o@leaderboard %>% \n  get_model_name(1) %>% \n  h2o.getModel()\n\n#> StackedEnsemble_BestOfFamily_3_AutoML_4_20230615_65507\n\n# Save the specified model\n#h2o.getModel(\"StackedEnsemble_BestOfFamily_3_AutoML_2_20230615_64046\") %>% \n#h2o.saveModel(path = \"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/Challeng3_automated_machine_learning_h2O/\")\n\n\n# Load a specific model\nloaded_model <- h2o.loadModel(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/Challeng3_automated_machine_learning_h2O/StackedEnsemble_BestOfFamily_3_AutoML_2_20230615_64046\")"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#predicting-using-leader-model",
    "href": "content/01_journal/03_data_wrangling.html#predicting-using-leader-model",
    "title": "Automated Machine Learning with H20 (I) & (II)",
    "section": "\n1.5 5.Predicting using Leader Model",
    "text": "1.5 5.Predicting using Leader Model\n\n# Generate predictions using the Stacked Ensemble model\npredictions <- h2o.predict(loaded_model, newdata = as.h2o(test_h2o))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Check the type of the predictions object\npred_type <- typeof(predictions)\n\n# Convert predictions to a tibble\npredictions_tbl <- as_tibble(predictions)\nView(predictions_tbl)"
  },
  {
    "objectID": "content/01_journal/01_Challenge1_Machine_Learning_Fundamentals.html",
    "href": "content/01_journal/01_Challenge1_Machine_Learning_Fundamentals.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "1 Challenge Summary\nYour organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns.\n\n2 Objectives\nApply your knowledge on K-Means and UMAP along with dplyr, ggplot2, and purrr to create a visualization that identifies subgroups in the S&P 500 Index. You will specifically apply:\n\nModeling: kmeans() and umap()\n\nIteration: purrr\n\nData Manipulation: dplyr, tidyr, and tibble\n\nVisualization: ggplot2 (bonus plotly)\n\n3 Libraries\nLoad the following libraries.\n\n# install.packages(\"plotly\")\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#> Loading required package: PerformanceAnalytics\n#> Loading required package: xts\n#> Loading required package: zoo\n#> \n#> Attaching package: 'zoo'\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     as.Date, as.Date.numeric\n#> \n#> \n#> ######################### Warning from 'xts' package ##########################\n#> #                                                                             #\n#> # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#> # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#> # source() into this session won't work correctly.                            #\n#> #                                                                             #\n#> # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#> # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#> # dplyr from breaking base R's lag() function.                                #\n#> #                                                                             #\n#> # Code in packages is not affected. It's protected by R's namespace mechanism #\n#> # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#> #                                                                             #\n#> ###############################################################################\n#> \n#> Attaching package: 'xts'\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     first, last\n#> \n#> \n#> Attaching package: 'PerformanceAnalytics'\n#> \n#> The following object is masked from 'package:graphics':\n#> \n#>     legend\n#> \n#> Loading required package: quantmod\n#> Loading required package: TTR\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\nlibrary(broom)\nlibrary(umap)\n\nlibrary(magrittr)\n\n#> \n#> Attaching package: 'magrittr'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     set_names\n#> \n#> The following object is masked from 'package:tidyr':\n#> \n#>     extract\n\nlibrary(dplyr)\n\n\n4 Data\nWe will be using stock prices in this analysis. Although some of you know already how to use an API to retrieve stock prices I obtained the stock prices for every stock in the S&P 500 index for you already. The files are saved in the session_6_data directory.\nWe can read in the stock prices. The data is 1.2M observations. The most important columns for our analysis are:\n\n\nsymbol: The stock ticker symbol that corresponds to a company’s stock price\n\ndate: The timestamp relating the symbol to the share price at that point in time\n\nadjusted: The stock price, adjusted for any splits and dividends (we use this when analyzing stock data over long periods of time)\n\n\n# STOCK PRICES\nsp_500_prices_tbl <- read_rds(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/sp_500_prices_tbl.rds\")\nsp_500_prices_tbl\n\n\n\n  \n\n\n\nThe second data frame contains information about the stocks the most important of which are:\n\n\ncompany: The company name\n\nsector: The sector that the company belongs to\n\n\n# SECTOR INFORMATION\nsp_500_index_tbl <- read_rds(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/sp_500_index_tbl.rds\")\nsp_500_index_tbl"
  }
]