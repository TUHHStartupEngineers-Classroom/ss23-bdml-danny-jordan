[
  {
    "objectID": "content/01_journal/01_Machine Learning Fundamentals.html",
    "href": "content/01_journal/01_Machine Learning Fundamentals.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "1 Challenge Summary\nYour organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns.\n\n2 Objectives\nApply your knowledge on K-Means and UMAP along with dplyr, ggplot2, and purrr to create a visualization that identifies subgroups in the S&P 500 Index. You will specifically apply:\n\nModeling: kmeans() and umap()\n\nIteration: purrr\n\nData Manipulation: dplyr, tidyr, and tibble\n\nVisualization: ggplot2 (bonus plotly)\n\n3 Libraries\nLoad the following libraries.\n\n# install.packages(\"plotly\")\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#> Loading required package: PerformanceAnalytics\n#> Loading required package: xts\n#> Loading required package: zoo\n#> \n#> Attaching package: 'zoo'\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     as.Date, as.Date.numeric\n#> \n#> \n#> ######################### Warning from 'xts' package ##########################\n#> #                                                                             #\n#> # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#> # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#> # source() into this session won't work correctly.                            #\n#> #                                                                             #\n#> # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#> # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#> # dplyr from breaking base R's lag() function.                                #\n#> #                                                                             #\n#> # Code in packages is not affected. It's protected by R's namespace mechanism #\n#> # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#> #                                                                             #\n#> ###############################################################################\n#> \n#> Attaching package: 'xts'\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     first, last\n#> \n#> \n#> Attaching package: 'PerformanceAnalytics'\n#> \n#> The following object is masked from 'package:graphics':\n#> \n#>     legend\n#> \n#> Loading required package: quantmod\n#> Loading required package: TTR\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\nlibrary(broom)\nlibrary(umap)\n\nlibrary(magrittr)\n\n#> \n#> Attaching package: 'magrittr'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     set_names\n#> \n#> The following object is masked from 'package:tidyr':\n#> \n#>     extract\n\nlibrary(dplyr)\n\n\n4 Data\nWe will be using stock prices in this analysis. Although some of you know already how to use an API to retrieve stock prices I obtained the stock prices for every stock in the S&P 500 index for you already. The files are saved in the session_6_data directory.\nWe can read in the stock prices. The data is 1.2M observations. The most important columns for our analysis are:\n\n\nsymbol: The stock ticker symbol that corresponds to a company’s stock price\n\ndate: The timestamp relating the symbol to the share price at that point in time\n\nadjusted: The stock price, adjusted for any splits and dividends (we use this when analyzing stock data over long periods of time)\n\n\n# STOCK PRICES\nsp_500_prices_tbl <- read_rds(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/sp_500_prices_tbl.rds\")\nsp_500_prices_tbl\n\n\n\n  \n\n\n\nThe second data frame contains information about the stocks the most important of which are:\n\n\ncompany: The company name\n\nsector: The sector that the company belongs to\n\n\n# SECTOR INFORMATION\nsp_500_index_tbl <- read_rds(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/sp_500_index_tbl.rds\")\nsp_500_index_tbl"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "1 Download the bike json file and open it\n\nlibrary(jsonlite)\nbike_data_lst <- fromJSON(\"02_data_acquisition/bike_data.json\")\n# Open the data by clicking on it in the environment or by running View()\nView(bike_data_lst)\ndisplay_value <- bike_data_lst$productDetail$variationAttributes$values[[1]]$displayValue\n\n\n2 Load all important Libraries for Webscraping\n\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc.\nlibrary(rvest)     # HTML Hacking & Web Scraping\nlibrary(xopen)     # Quickly opening URLs\nlibrary(jsonlite)  # converts JSON files to R objects\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(xopen) \n\nurl_home          <- \"https://www.canyon.com/en-de\"\n#xopen(url_home) # Open links directly from RStudio to inspect them\n\n# Read in the HTML for the entire webpage\nhtml_home         <- read_html(url_home)\n\n# Web scrape the ids for the families\nbike_family_tbl <- html_home %>%\n\n# Get the nodes for the families ...\n\nhtml_elements(css = \".header__navBarPreloadItem--level1\")  %>% \nhtml_text()  %>% \n\ndiscard(.p = ~stringr::str_detect(.x,\"Gear|Outlet|Service\")) %>%\n  \n# Convert vector to tibble\nenframe(name = \"position\", value = \"family_class\") %>%\n\n# Add a hashtag so we can get nodes of the categories by id (#)\nmutate(\n   family_id = str_glue(\"#{family_class}\")\n)\n\n\n3 Tried to use OpenWeatherMap API, but after problems (maybe due to activation of API Key) I used an\n\n4 open API with Rick and Morty data and accessed 3 characters\n\n# Load necessary packages\nlibrary(httr)\nlibrary(jsonlite)\n\n# Set the URL for the API request\nurl <- \"https://rickandmortyapi.com/api/character\"\n\n# Make a GET request to the API\nresponse <- GET(url)\n\n# Check the status of the request\nstop_for_status(response)\n\n# Parse the content of the response\ncontent <- content(response, \"text\")\n\n# Convert the JSON content into a list\ncharacter_data <- fromJSON(content)\n\n# Print the character data\nprint(character_data)\n\n# Select characters with IDs 1, 2 and 3\nselected_characters <- character_data$results[character_data$results$id %in% c(1, 2, 3), ]\n\n# Print the data for these characters\nprint(selected_characters)\n\n\n\nRevenue by years\n\n\n\n5 Challenge 2.b\n\n6 Scrape one of the competitor websites of canyon: Chose Rosebike\n\n7 1.0 LIBRARIES —-\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc. library(rvest) # HTML Hacking & Web Scraping library(xopen) # Quickly opening URLs library(jsonlite) # converts JSON files to R objects library(glue) # concatenate strings library(stringi) # character string/text processing\n\n8 1.1 COLLECT PRODUCT FAMILIES —-\nurl_home <- “https://www.rosebikes.com/”\n\n9 Read in the HTML for the entire webpage\nhtml_home <- read_html(url_home)\n\n10 Web scrape the ids for the families\nbike_family_tbl <- html_home %>% # Get the nodes for the families … html_nodes(css = “.main-navigation-category-bikes__title .main-navigation-category-bikes-level-3__list-item:nth-child(1) .main-navigation-item__title”) %>% # …and extract the information of the id attribute html_text()\n\n11 Print the bike_family_tbl\nprint(bike_family_tbl)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "1 Challenge Summary\nYour organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns.\n\n2 Objectives\nApply your knowledge on K-Means and UMAP along with dplyr, ggplot2, and purrr to create a visualization that identifies subgroups in the S&P 500 Index. You will specifically apply:\n\nModeling: kmeans() and umap()\n\nIteration: purrr\n\nData Manipulation: dplyr, tidyr, and tibble\n\nVisualization: ggplot2 (bonus plotly)\n\n3 Libraries\nLoad the following libraries.\n\n# install.packages(\"plotly\")\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#> Loading required package: PerformanceAnalytics\n#> Loading required package: xts\n#> Loading required package: zoo\n#> \n#> Attaching package: 'zoo'\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     as.Date, as.Date.numeric\n#> \n#> \n#> ######################### Warning from 'xts' package ##########################\n#> #                                                                             #\n#> # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#> # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#> # source() into this session won't work correctly.                            #\n#> #                                                                             #\n#> # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#> # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#> # dplyr from breaking base R's lag() function.                                #\n#> #                                                                             #\n#> # Code in packages is not affected. It's protected by R's namespace mechanism #\n#> # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#> #                                                                             #\n#> ###############################################################################\n#> \n#> Attaching package: 'xts'\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     first, last\n#> \n#> \n#> Attaching package: 'PerformanceAnalytics'\n#> \n#> The following object is masked from 'package:graphics':\n#> \n#>     legend\n#> \n#> Loading required package: quantmod\n#> Loading required package: TTR\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\nlibrary(broom)\nlibrary(umap)\n\nlibrary(magrittr)\n\n#> \n#> Attaching package: 'magrittr'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     set_names\n#> \n#> The following object is masked from 'package:tidyr':\n#> \n#>     extract\n\nlibrary(dplyr)\n\n\n4 Data\nWe will be using stock prices in this analysis. Although some of you know already how to use an API to retrieve stock prices I obtained the stock prices for every stock in the S&P 500 index for you already. The files are saved in the session_6_data directory.\nWe can read in the stock prices. The data is 1.2M observations. The most important columns for our analysis are:\n\n\nsymbol: The stock ticker symbol that corresponds to a company’s stock price\n\ndate: The timestamp relating the symbol to the share price at that point in time\n\nadjusted: The stock price, adjusted for any splits and dividends (we use this when analyzing stock data over long periods of time)\n\n\n# STOCK PRICES\nsp_500_prices_tbl <- read_rds(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/sp_500_prices_tbl.rds\")\nsp_500_prices_tbl\n\n\n\n  \n\n\n\nThe second data frame contains information about the stocks the most important of which are:\n\n\ncompany: The company name\n\nsector: The sector that the company belongs to\n\n\n# SECTOR INFORMATION\nsp_500_index_tbl <- read_rds(\"C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdml-danny-jordan/sp_500_index_tbl.rds\")\nsp_500_index_tbl"
  }
]